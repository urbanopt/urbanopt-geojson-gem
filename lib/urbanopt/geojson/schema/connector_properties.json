{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "http://json-schema.org/openstudio-urban-modeling/connector.json#",
	"type": "object",
	"title": "Connector Schema",
	"description": "An explanation of the purpose of this Connector Object",
	"readOnly": true,
	"writeOnly": false,
	"required": [
		"fuel",
		"type",
		"origin",
		"termination",
		"connector_type",
		"district_system_id"
	],
	"properties": {
		"address": {
			"description": "Street address",
			"type": "string"
		},
		"connector_type": {
			"type": "string",
			"enum": [
				"Pipe"
			]
		},
		"district_system_id": {
			"type": "string",
			"description": "District System whose output is running through this connector/pipe"
		},
		"id": {
			"FIXME": "may be there, type not known (string? number?)",
			"description": "Unique id used to refer to this feature within this dataset, generated by database.",
			"type": "string"
		},
		"lengths": {
			"description": "Length of each segment in ft",
			"type": "array"
		},
		"geojson_id": {
			"description": "Id of the geojson for this feature, managed by database.",
			"type": "string"
		},
		"legal_name": {
			"description": "Legal name used to identify this feature.",
			"type": "string"
		},
		"name": {
			"description": "Feature name",
			"type": "string"
		},
		"project_id": {
			"description": "Project which this feature belongs to, managed by the database.",
			"type": "string"
		},
		"source_id": {
			"description": "Id of the feature in original data source.",
			"type": "string"
		},
		"source_name": {
			"description": "Name of the original data source.",
			"type": "string"
		},
		"origin": {
			"$id": "#/properties/origin",
			"type": "object",
			"$ref": "#/definitions/connectorEndpoint",
			// "direction": {
			// 	"type": "string",
			// 	"const": "OUT",
			// 	"description": "ORIGIN IMPLIES direction: 'OUT' for the connector. Added this property to be explicit but it can be removed if redundant. The connectorEndpoint's district_system_id, building_id, or connector_id represents the origin from which this connector is pulling energy (out)."
			// }
		},
		"termination": {
			"$id": "#/properties/termination",
			"type": "object",
			"$ref": "#/definitions/connectorEndpoint",
			// "direction": {
			// 	"type": "string",
			// 	"const": "IN",
			// 	"description": "TERMINATION IMPLIES direction: 'IN' for the connector. Added this property to be explicit but it can be removed if redundant. The connectorEndpoint's district_system_id, building_id, or connector_id represents the origin into which this connector is pushing energy (in)."
			// }
		},
		"fuel": {
			"type": "string",
			"description": "What kind of energy/fuel is this connector transporting? (Question: is this not determined by the connector's district system_id?)",
			"enum": [
				"Electricity",
				"NaturalGas",
				"Water"
			]
		}
	},
	"oneOf": [
		{
			"properties": {
				"fuel": {
					"const": "Electricity"
				},
				"maximum_rate": {
					"type": "integer",
					"description": "If the connector fuel is 'Electricity', said connector's schema now includes 'maximum_rate': an Integer representing the rate in kiloWatts."
				}
			},
			"required": [
				"maximum_rate"
			]
		},
		{
			"properties": {
				"fuel": {
					"const": "HotWater"
				},
				//  remove supply/return temps 
				"supply_temp": {
					"type": "integer",
					"description": "If the connector fuel is 'HotWater', said connector's schema now includes 'supply_temp': an Integer representing the supply temperature (sourcing from the origin) in degrees celsius."
				},
				"return_temp": {
					"type": "integer",
					"description": "If the connector fuel is 'HotWater', said connector's schema now includes 'return_temp': an Integer representing the returned (sourcing from ... ?) temperature in degrees celsius."
				},
				"flow_rate": {
					"type": "integer",
					"description": "If the connector fuel is 'HotWater', said connector's schema now includes 'flor_rate': an Integer representing the fuel's flow rate in GPM."
				}
			},
			"required": [
				"supply_temp",
				"return_temp",
				"flow_rate"
			]
		}
	],
	"definitions": {
		"connectorEndpoint": {
			"type": "object",
			"description": "This object describes either the origin or the termination of this connector.",
			"required": [
				"connection_endpoint_type",
				"equipment"
			],
			"properties": {
				"connectorType": {
					"type": "string",
					"enum": [
						"Pipe"
					]
				},
				"connection_endpoint_type": {
					"type": "string",
					"description": "The connection_type indicates 'where' the connector endpoint resides, is this endpoint connecting to a District Energy System, a building or another connector?",
					"enum": [
						"DES",
						"Building",
						"Connector"
					]
				},
				// this is unnecessary
				"equipment": {
					"type": "string",
					"description": "What is the physical composition of connectorEndpoint? Is it the source or receptor of an energy? Or is it simply the crossroads of two pipes/connectors?",
					"enum": [
						"Boiler",
						"Heat Pump",
						"Connector Crossroad"
					]
				}
			},
			"oneOf": [
				{
					"properties": {
						"connection_endpoint_type": {
							"const": "Building"
						},
						"building_id": {
							"type": "string",
							"description": "If the connectorEndpoint type is 'Building', said connectorEndpoint's schema now includes building_id: foreign key associating this endpoint with said building."
						}
					},
					"required": [
						"building_id"
					]
				},
				{
					"properties": {
						"connection_endpoint_type": {
							"const": "Connector"
						},
						"connector_id": {
							"type": "string",
							"description": "If the connectorEndpoint type is 'Connector', said connectorEndpoint's schema now includes connector_id: foreign key associating this Connectorendpoint with said connector."
						}
					},
					// handle T's (wouldn't just be one connector_id)-- add junction objects 
					"required": [
						"connector_id"
					]
				},
				{
					"properties": {
						"equipment": {
							"const": "Heat Pump"
						},
						"COP": {
							"type": "integer",
							"description": "If the connectorEndpoint equipment is 'Heat Pump', said connectorEndpoint's schema now includes COP: (?)"
						}
					},
					"required": [
						"COP"
					]
				}
			]
		}
	}
}