var search_data = {"index":{"searchIndex":["newton","object","openstudio","measure","model","osversion","urbanopt","geojson","building","districtsystem","extension","feature","geofile","helper","mapper","model","region","scalearea","zoning","adjust_vertices_to_area()","calculate_aspect_ratio()","calculate_perimeter()","change_adjacent_surfaces_to_adiabatic()","convert_to_shading_surface_group()","create_building()","create_construction_set()","create_origin_lat_lon()","create_osw()","create_other_building()","create_other_buildings()","create_photovoltaics()","create_shading_surfaces()","create_space_per_building()","create_space_per_floor()","create_space_type()","create_space_types()","create_windows()","divide_floor_print()","doc_templates_dir()","feature_points()","feature_type()","feature_type()","feature_type()","features()","files_dir()","find_feature_center()","floor_print_from_polygon()","from_file()","get_building_schema()","get_building_schema()","get_district_system_schema()","get_district_system_schema()","get_electrical_connector_schema()","get_electrical_junction_schema()","get_feature_by_id()","get_first_floor_points()","get_geojson_schema()","get_min_lon_lat()","get_multi_polygons()","get_perimeter_multiplier()","get_region_schema()","get_region_schema()","get_taxlot_schema()","get_thermal_connector_schema()","get_thermal_junction_schema()","id()","is_shadowed()","jacobian()","json()","logger()","ludecomp()","lusolve()","measures_dir()","merge_site_properties()","method_missing()","name()","new()","new()","new()","new()","new()","new()","other_points()","process_other_buildings()","schema()","schema_file()","schema_file()","schema_file()","setlogger()","to_hash()","transfer_prev_model_data()","validate()","validate()","validate_feat()","values()","changelog","contributing","rdoc_main"],"longSearchIndex":["newton","object","openstudio","openstudio::measure","openstudio::model","openstudio::osversion","urbanopt","urbanopt::geojson","urbanopt::geojson::building","urbanopt::geojson::districtsystem","urbanopt::geojson::extension","urbanopt::geojson::feature","urbanopt::geojson::geofile","urbanopt::geojson::helper","urbanopt::geojson::mapper","urbanopt::geojson::model","urbanopt::geojson::region","urbanopt::geojson::scalearea","urbanopt::geojson::zoning","urbanopt::geojson::helper::adjust_vertices_to_area()","urbanopt::geojson::feature#calculate_aspect_ratio()","urbanopt::geojson::building#calculate_perimeter()","urbanopt::geojson::model::change_adjacent_surfaces_to_adiabatic()","urbanopt::geojson::helper::convert_to_shading_surface_group()","urbanopt::geojson::building#create_building()","urbanopt::geojson::model::create_construction_set()","urbanopt::geojson::feature#create_origin_lat_lon()","urbanopt::geojson::mapper#create_osw()","urbanopt::geojson::building#create_other_building()","urbanopt::geojson::building#create_other_buildings()","urbanopt::geojson::helper::create_photovoltaics()","urbanopt::geojson::helper::create_shading_surfaces()","urbanopt::geojson::building#create_space_per_building()","urbanopt::geojson::building#create_space_per_floor()","urbanopt::geojson::model::create_space_type()","urbanopt::geojson::helper::create_space_types()","urbanopt::geojson::building#create_windows()","urbanopt::geojson::zoning::divide_floor_print()","urbanopt::geojson::extension#doc_templates_dir()","urbanopt::geojson::building#feature_points()","urbanopt::geojson::building#feature_type()","urbanopt::geojson::feature#feature_type()","urbanopt::geojson::region#feature_type()","urbanopt::geojson::geofile#features()","urbanopt::geojson::extension#files_dir()","urbanopt::geojson::feature#find_feature_center()","urbanopt::geojson::helper::floor_print_from_polygon()","urbanopt::geojson::geofile::from_file()","object#get_building_schema()","urbanopt::geojson::geofile::get_building_schema()","object#get_district_system_schema()","urbanopt::geojson::geofile::get_district_system_schema()","urbanopt::geojson::geofile::get_electrical_connector_schema()","urbanopt::geojson::geofile::get_electrical_junction_schema()","urbanopt::geojson::geofile#get_feature_by_id()","urbanopt::geojson::zoning::get_first_floor_points()","urbanopt::geojson::geofile::get_geojson_schema()","urbanopt::geojson::feature#get_min_lon_lat()","urbanopt::geojson::feature#get_multi_polygons()","urbanopt::geojson::feature#get_perimeter_multiplier()","object#get_region_schema()","urbanopt::geojson::geofile::get_region_schema()","object#get_taxlot_schema()","urbanopt::geojson::geofile::get_thermal_connector_schema()","urbanopt::geojson::geofile::get_thermal_junction_schema()","urbanopt::geojson::feature#id()","urbanopt::geojson::helper::is_shadowed()","newton::jacobian()","urbanopt::geojson::geofile#json()","urbanopt::geojson::logger()","newton::ludecomp()","newton::lusolve()","urbanopt::geojson::extension#measures_dir()","urbanopt::geojson::geofile#merge_site_properties()","urbanopt::geojson::feature#method_missing()","urbanopt::geojson::feature#name()","urbanopt::geojson::building::new()","urbanopt::geojson::feature::new()","urbanopt::geojson::geofile::new()","urbanopt::geojson::mapper::new()","urbanopt::geojson::region::new()","urbanopt::geojson::scalearea::new()","urbanopt::geojson::building#other_points()","urbanopt::geojson::helper::process_other_buildings()","urbanopt::geojson::feature#schema()","urbanopt::geojson::building#schema_file()","urbanopt::geojson::feature#schema_file()","urbanopt::geojson::region#schema_file()","urbanopt::geojson::setlogger()","urbanopt::geojson::building#to_hash()","urbanopt::geojson::model::transfer_prev_model_data()","object#validate()","urbanopt::geojson::geofile::validate()","urbanopt::geojson::feature#validate_feat()","urbanopt::geojson::scalearea#values()","","",""],"info":[["Newton","","Newton.html","",""],["Object","","Object.html","",""],["OpenStudio","","OpenStudio.html","",""],["OpenStudio::Measure","","OpenStudio/Measure.html","",""],["OpenStudio::Model","","OpenStudio/Model.html","",""],["OpenStudio::OSVersion","","OpenStudio/OSVersion.html","",""],["URBANopt","","URBANopt.html","","<p>*********************************************************************************\nURBANopt (tm), Copyright …\n"],["URBANopt::GeoJSON","","URBANopt/GeoJSON.html","",""],["URBANopt::GeoJSON::Building","","URBANopt/GeoJSON/Building.html","",""],["URBANopt::GeoJSON::DistrictSystem","","URBANopt/GeoJSON/DistrictSystem.html","",""],["URBANopt::GeoJSON::Extension","","URBANopt/GeoJSON/Extension.html","",""],["URBANopt::GeoJSON::Feature","","URBANopt/GeoJSON/Feature.html","",""],["URBANopt::GeoJSON::GeoFile","","URBANopt/GeoJSON/GeoFile.html","",""],["URBANopt::GeoJSON::Helper","","URBANopt/GeoJSON/Helper.html","",""],["URBANopt::GeoJSON::Mapper","","URBANopt/GeoJSON/Mapper.html","",""],["URBANopt::GeoJSON::Model","","URBANopt/GeoJSON/Model.html","",""],["URBANopt::GeoJSON::Region","","URBANopt/GeoJSON/Region.html","",""],["URBANopt::GeoJSON::ScaleArea","","URBANopt/GeoJSON/ScaleArea.html","",""],["URBANopt::GeoJSON::Zoning","","URBANopt/GeoJSON/Zoning.html","",""],["adjust_vertices_to_area","URBANopt::GeoJSON::Helper","URBANopt/GeoJSON/Helper.html#method-c-adjust_vertices_to_area","(vertices, desired_area, runner, eps = 0.1)","<p>Used to scale footprint to desired area while keeping the original shape.\n<p>Parameters &mdash; \n<p><code>vertices</code> - <em>Type:Array</em> …\n"],["calculate_aspect_ratio","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-calculate_aspect_ratio","()","<p>Used to calculate the aspect ratio for a given floor polygon.\n"],["calculate_perimeter","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-calculate_perimeter","(feature)","<p>Used to calculate the perimeter from the floor polygon of a Feature.\nReturns the perimeter value.\n<p>Parameters … &mdash; \n"],["change_adjacent_surfaces_to_adiabatic","URBANopt::GeoJSON::Model","URBANopt/GeoJSON/Model.html#method-c-change_adjacent_surfaces_to_adiabatic","(model, runner)","<p>This method loops through each surface of the model for adjacent surfaces.\nIt sets the outside boundary …\n"],["convert_to_shading_surface_group","URBANopt::GeoJSON::Helper","URBANopt/GeoJSON/Helper.html#method-c-convert_to_shading_surface_group","(space)","<p>This method loops though all the surfaces of the space and creates shading\nsurfaces. It also removes …\n"],["create_building","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-create_building","(create_method, model, origin_lat_lon, runner, zoning = false, scaled_footprint_area = 0, other_building = @feature_json)","<p>This method creates a building for a given feature specified in the\nfeature_json as per the create_method. …\n"],["create_construction_set","URBANopt::GeoJSON::Model","URBANopt/GeoJSON/Model.html#method-c-create_construction_set","(model, runner)","<p>Used to add construction to the model. This method uses the default\nconstruction to the building, or …\n"],["create_origin_lat_lon","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-create_origin_lat_lon","(runner)","<p>Returns instance of OpenStudio::PointLatLon for latitude and longitude of\nfeature.\n<p>Parameters &mdash; \n<p><code>runner</code> - …\n\n"],["create_osw","URBANopt::GeoJSON::Mapper","URBANopt/GeoJSON/Mapper.html#method-i-create_osw","(scenario, feature_id, feature_name)","<p>Creates an OpenStudio Workflow file for a given ScenarioBase object,\nfeature id and feature name.\n<p>Parameters … &mdash; \n"],["create_other_building","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-create_other_building","(create_method, model, origin_lat_lon, runner, zoning = false, scaled_footprint_area = 0, other_building = @feature_json)",""],["create_other_buildings","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-create_other_buildings","(other_building_type, other_buildings, model, origin_lat_lon, runner, zoning = false)","<p>This method is used to create the surrounding buildings as shading objects.\n<p>Returns an array of instances …\n"],["create_photovoltaics","URBANopt::GeoJSON::Helper","URBANopt/GeoJSON/Helper.html#method-c-create_photovoltaics","(feature, height, model, origin_lat_lon, runner)","<p>Returns array containing instance of\n<code>OpenStudio::Model::ShadingSurface</code> .\n<p>Used to create Photovoltaics …\n"],["create_shading_surfaces","URBANopt::GeoJSON::Helper","URBANopt/GeoJSON/Helper.html#method-c-create_shading_surfaces","(feature, model, origin_lat_lon, runner, spaces)","<p>Returns array containing instance of\n<code>OpenStudio::Model::ShadingSurface</code> .\n<p>Parameters &mdash; \n<p><code>feature</code> - <em>Type:String</em> …\n"],["create_space_per_building","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-create_space_per_building","(min_elevation, max_elevation, model, origin_lat_lon, runner, zoning = false, other_building)","<p>Returns an array of instances of <code>OpenStudio::Model::Space</code> per\nbuilding.\n<p>Parameters &mdash; \n<p><code>min_elevation</code> - <em>Type:Integer</em> …\n"],["create_space_per_floor","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-create_space_per_floor","(story_number, floor_to_floor_height, model, origin_lat_lon, runner, zoning = false, scaled_footprint_area)","<p>Returns an array of instances of <code>OpenStudio::Model::Space</code> per\nfloor.\n<p>Parameters &mdash; \n<p><code>feature</code> - <em>Type:String</em> …\n"],["create_space_type","URBANopt::GeoJSON::Model","URBANopt/GeoJSON/Model.html#method-c-create_space_type","(bldg_use, space_use, model)","<p>Returns instance of <code>OpenStudio::Model::SpaceType</code>.\n<p>Parameters &mdash; \n<p><code>bldg_use</code> - <em>Type:String</em> - Indicates the building …\n"],["create_space_types","URBANopt::GeoJSON::Helper","URBANopt/GeoJSON/Helper.html#method-c-create_space_types","(stories, model, runner)","<p>This method loops through all the stories in the model, and returns any\nspace types previously assigned. …\n"],["create_windows","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-create_windows","(spaces)","<p>This method loops through all the spaces of the building and for each Wall\nsurface with Outdoors boundary …\n"],["divide_floor_print","URBANopt::GeoJSON::Zoning","URBANopt/GeoJSON/Zoning.html#method-c-divide_floor_print","(floor_print, perimeter_depth, runner, scale = false)","<p>This method divides the floor print using perimeter and core zoning at the\ndepth of the <code>perimeter_depth</code> …\n"],["doc_templates_dir","URBANopt::GeoJSON::Extension","URBANopt/GeoJSON/Extension.html#method-i-doc_templates_dir","()","<p>The directory containing common files like copyright and license notices\nwhich are used to update measures …\n"],["feature_points","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-feature_points","(origin_lat_lon, runner, zoning)","<p>Return the features multi polygon in an array of the form coordinate pairs\nin double nested Array.\n<p>Parameters … &mdash; \n"],["feature_type","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-feature_type","()","<p>Used to describe the Building feature type using the base method from the\nFeature class.\n"],["feature_type","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-feature_type","()","<p>Raises an error if the <code>feature_type</code> is not specified the the\nFeature&#39;s class.\n"],["feature_type","URBANopt::GeoJSON::Region","URBANopt/GeoJSON/Region.html#method-i-feature_type","()","<p>Used to describe the Region feature type using the base method from the\nFeature class.\n"],["features","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-i-features","()","<p>This method loops through all the features in the GeoJSON file, creates new\nBuildings or District Systems …\n"],["files_dir","URBANopt::GeoJSON::Extension","URBANopt/GeoJSON/Extension.html#method-i-files_dir","()","<p>The directory containign relevant files such as weather data, design days,\netc. The method returns nil …\n"],["find_feature_center","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-find_feature_center","(vertices)","<p>Used to determine the centroid for the feature&#39;s coordinates.\n<p>Parameters &mdash; \n<p><code>vertices</code> - The first set …\n\n"],["floor_print_from_polygon","URBANopt::GeoJSON::Helper","URBANopt/GeoJSON/Helper.html#method-c-floor_print_from_polygon","(polygon, elevation, origin_lat_lon, runner, zoning = false, scaled_footprint_area = 0)","<p>Returns an <code>OpenStudio::Point3dVector</code> .\n<p>Creates the floor print for a given polygon.\n<p>Parameters &mdash; \n<p><code>polygon</code> …\n"],["from_file","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-from_file","(path)","<p>Parameters &mdash; Used to check the GeoJSON file path.\n<p><code>path</code> - <em>Type:String</em> - GeoJSON file path.\n\n\n"],["get_building_schema","Object","Object.html#method-i-get_building_schema","(strict)",""],["get_building_schema","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-get_building_schema","(strict)",""],["get_district_system_schema","Object","Object.html#method-i-get_district_system_schema","(strict)",""],["get_district_system_schema","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-get_district_system_schema","(strict)",""],["get_electrical_connector_schema","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-get_electrical_connector_schema","(strict)",""],["get_electrical_junction_schema","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-get_electrical_junction_schema","(strict)",""],["get_feature_by_id","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-i-get_feature_by_id","(feature_id)","<p>Returns feature object by feature_id from specified GeoJSON file and\ncreates a new <code>URBANopt::GeoJSON::Building</code> …\n"],["get_first_floor_points","URBANopt::GeoJSON::Zoning","URBANopt/GeoJSON/Zoning.html#method-c-get_first_floor_points","(multi_polygons, origin_lat_lon, runner)","<p>The get_first_floor_points is used to return the points for the first\nfloor.\n<p>It returns an Array containing …\n"],["get_geojson_schema","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-get_geojson_schema","(strict)",""],["get_min_lon_lat","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-get_min_lon_lat","()","<p>Returns coordinate with the minimum longitute and latitude within a given\n<code>building_json</code> .\n"],["get_multi_polygons","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-get_multi_polygons","(json = @feature_json)","<p>Returns MultiPolygon coordinates (coordinate pairs in double nested Array)\n<p>Parameters &mdash; <code>json</code>\nFor example: …\n"],["get_perimeter_multiplier","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-get_perimeter_multiplier","(area, aspect_ratio, perimeter_original)","<p>Used to calculate the perimeter multiplier given the aspect ratio, original\nperimeter and area.\n"],["get_region_schema","Object","Object.html#method-i-get_region_schema","(strict)",""],["get_region_schema","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-get_region_schema","(strict)",""],["get_taxlot_schema","Object","Object.html#method-i-get_taxlot_schema","(strict)",""],["get_thermal_connector_schema","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-get_thermal_connector_schema","(strict)",""],["get_thermal_junction_schema","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-get_thermal_junction_schema","(strict)",""],["id","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-id","()","<p>Returns the id of the feature.\n"],["is_shadowed","URBANopt::GeoJSON::Helper","URBANopt/GeoJSON/Helper.html#method-c-is_shadowed","(potentially_shaded, potential_shader, origin_lat_lon)","<p>Returns Boolean which indicates whether the specified building is shadowed\nby other building.\n<p>Parameters … &mdash; \n"],["jacobian","Newton","Newton.html#method-c-jacobian","(f, fx, x)",""],["json","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-i-json","()",""],["logger","URBANopt::GeoJSON","URBANopt/GeoJSON.html#method-c-logger","()",""],["ludecomp","Newton","Newton.html#method-c-ludecomp","(a, n, zero = 0, one = 1)",""],["lusolve","Newton","Newton.html#method-c-lusolve","(a, b, ps, zero = 0.0)",""],["measures_dir","URBANopt::GeoJSON::Extension","URBANopt/GeoJSON/Extension.html#method-i-measures_dir","()","<p>Returns the absolute path of the measures or returns nil, in case no\nmeasures are added. It can be used …\n"],["merge_site_properties","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-i-merge_site_properties","(feature)","<p>Merge Site Properties in Feature. Returns feature with site properties\nadded to its properties section. …\n"],["method_missing","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-method_missing","(name, *args, &blk)","<p>rubocop:disable Style/MethodMissing\n"],["name","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-name","()","<p>Returns the name of the feature.\n"],["new","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-c-new","(feature = {})","<p>Used to initialize the feature. This method is inherited from the Feature\nclass.\n"],["new","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-c-new","(feature)","<p>Used to validate the feature using the validate_feat method.\n"],["new","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-new","(geojson_file, path = nil)","<p>Initialize GeoJSON file and path.\n<p>Parameters &mdash; \n<p><code>path</code> - <em>Type:String</em> GeoJSON File path.\n<p><code>data</code> - <em>Type:Hash</em> Contains …\n"],["new","URBANopt::GeoJSON::Mapper","URBANopt/GeoJSON/Mapper.html#method-c-new","()","<p>This class inherits from the <code>MapperBase</code> . Used to perform\ninitializing functions, used to define the …\n"],["new","URBANopt::GeoJSON::Region","URBANopt/GeoJSON/Region.html#method-c-new","(feature)","<p>Used to initialize the feature. This method is inherited from the Feature\nclass.\n"],["new","URBANopt::GeoJSON::ScaleArea","URBANopt/GeoJSON/ScaleArea.html#method-c-new","(vertices, desired_area, runner, eps)",""],["other_points","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-other_points","(other_building, other_height, origin_lat_lon, runner, zoning)","<p>Return the points of the other building object. This method is similar to\nfeature_points, but accepts …\n"],["process_other_buildings","URBANopt::GeoJSON::Helper","URBANopt/GeoJSON/Helper.html#method-c-process_other_buildings","(building, other_building_type, other_buildings, model, origin_lat_lon, runner, zoning = false)","<p>Calculate which other buildings are shading the current feature and return\nas an array of <code>OpenStudio::Model::Space</code> …\n"],["schema","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-schema","()",""],["schema_file","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-schema_file","()","<p>Returns the building_properties schema.\n"],["schema_file","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-schema_file","()","<p>Raises an error if the <code>schema_file</code> is not specified the the\nFeature&#39;s class.\n"],["schema_file","URBANopt::GeoJSON::Region","URBANopt/GeoJSON/Region.html#method-i-schema_file","()","<p>Returns the region_properties schema.\n"],["setLogger","URBANopt::GeoJSON","URBANopt/GeoJSON.html#method-c-setLogger","(l)",""],["to_hash","URBANopt::GeoJSON::Building","URBANopt/GeoJSON/Building.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization. Excludes attributes\nwith nil value.\n"],["transfer_prev_model_data","URBANopt::GeoJSON::Model","URBANopt/GeoJSON/Model.html#method-c-transfer_prev_model_data","(model, space_types)","<p>Loops through all the building stories in the model and for each space sets\nspace type from the building …\n"],["validate","Object","Object.html#method-i-validate","(schema, data)",""],["validate","URBANopt::GeoJSON::GeoFile","URBANopt/GeoJSON/GeoFile.html#method-c-validate","(schema_json, data)","<p>Validate GeoJSON against schema.\n<p>Parameters &mdash; \n<p><code>data</code> - + - <em>Type:Hash</em> - Input GeoJSON file\n\n"],["validate_feat","URBANopt::GeoJSON::Feature","URBANopt/GeoJSON/Feature.html#method-i-validate_feat","(feature)","<p>Used to validate the feature by checking <code>feature_id</code> ,\n<code>geometry</code>, <code>properties</code> and\n<code>geometry_type</code> . rubocop:disable …\n"],["values","URBANopt::GeoJSON::ScaleArea","URBANopt/GeoJSON/ScaleArea.html#method-i-values","(x)","<p>Used to determine new scaled vertices, by iteratively passing in the\nperimeter distance to minimise the …\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>URBANopt GeoJSON Gem\n<p>Version 0.4.0\n<p>Date Rage 08/08/20 - 09/25/20\n"],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>URBANopt Contribution Policy\n<p>Version 1.0\n<p>The URBANopt™ team welcomes your contribution to the project. …\n"],["RDOC_MAIN","","RDOC_MAIN_md.html","","<p>UrbanOpt GeoJSON Gem\n<p>back to main docs\n<p>The URBANopt™ GeoJSON Gem has been developed by restructuring methods …\n"]]}}